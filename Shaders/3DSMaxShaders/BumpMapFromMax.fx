float4x4 mWorld_0_0 : WORLDT;
float4x4 mIWorld_0_0 : WORLDI;
float4x4 mWorldViewProj_0_0 : WORLDVIEWPROJECTION;
float4 mCamPos_0_0 : WORLD_CAMERA_POSITION = {0.000000f, 0.000000f, 0.000000f, 0.000000f};
float Opacity_1_0 : OPACITY
<
string UIName = "Opacity";
float UIMin = 0.0;
float UIMax = 1.0;
float UIStep = 0.01;
> = 1.000000f;
float SpecularLevel_1_0 : SPECULARLEVEL
<
string UIName = "SpecularLevel";
float UIMin = 0.0;
float UIMax = 1.0;
float UIStep = 0.01;
> = 0.000000f;
float GlossLevel_1_0 : GLOSSLEVEL
<
string UIName = "GlossLevel";
float UIMin = 0.0;
float UIMax = 100.0;
float UIStep = 1.0;
> = 10.000000f;
float4 LightCol0_1_0 : LIGHTCOLOR
<
int LightRef = 0;
> = {0.000000f, 0.000000f, 0.000000f, 0.000000f};
float4 LightPos0_1_0 : POSITION
<
string Object = "PointLight";
string UIName = "LightPos0";
int refID = 0;
> = {0.000000f, 0.000000f, 0.000000f, 0.000000f};
float4 Emissive_1_0 : EMISSIVE
<
string UIName = "Emissive";
> = {0.000000f, 0.000000f, 0.000000f, 1.000000f};
float4 Specular_1_0 : SPECULAR
<
string UIName = "Specular";
> = {0.900000f, 0.900000f, 0.900000f, 1.000000f};


texture BumpTex
<
int Texcoord = 0;
int MapChannel = 1;
string UIName = "BumpTexture";
string name = "01-Default_BumpTex.dds";
>;


texture DiffuseTex : DIFFUSEMAP
<
int Texcoord = 0;
int MapChannel = 1;
string UIName = "DiffuseTexture";
string name = "01-Default_DiffuseTex.dds";
>;

sampler BumpTexSampler = sampler_state
{
Texture = (BumpTex);
};
sampler DiffuseTexSampler = sampler_state
{
Texture = (DiffuseTex);
};

VertexShader VS_pass0 = asm
{

vs_3_0

// Generated by ATI's Ashli Compiler on 2006-04-04 14:19:08.
// Ashli Version: 1.7.1


// Instructions (Alu):            37
// Registers    (Temp):           6
// Registers    (Constant):       14
// Registers    (Output):         1
// Registers    (OutputTexCoord): 6

dcl_position0 v0
dcl_normal0 v2
dcl_tangent0 v6
dcl_binormal0 v7
dcl_texcoord0 v8

def c13, 0, 0, 0, 0

dcl_position o0

dcl_texcoord0 o3
dcl_texcoord1 o4
dcl_texcoord2 o5
dcl_texcoord3 o6
dcl_texcoord4 o7
dcl_texcoord6 o9

mul r0, c12, v0.r
mad r0, c11, v0.g, r0
mad r0, c10, v0.b, r0
mad r0, c9, v0.a, r0
mov r1, c13.r
dp4 r1.r, c8, v2
dp4 r1.g, c7, v2
dp4 r1.b, c6, v2
dp4 r1.a, c5, v2
mov r2, c13.r
dp4 r2.r, c4, v0
dp4 r2.g, c3, v0
dp4 r2.b, c2, v0
dp4 r2.a, c1, v0
mov r3, c13.r
dp4 r3.r, c4, v0
dp4 r3.g, c3, v0
dp4 r3.b, c2, v0
dp4 r3.a, c1, v0
add r3, c0, -r3
mov r4, c13.r
dp4 r4.r, c8, v6
dp4 r4.g, c7, v6
dp4 r4.b, c6, v6
dp4 r4.a, c5, v6
mov r5, c13.r
dp4 r5.r, c8, v7
dp4 r5.g, c7, v7
dp4 r5.b, c6, v7
dp4 r5.a, c5, v7
mov o0, r0
mov o3, r1
mov o9, v8
mov o4, r2
mov o5, r3
mov o6, r4
mov o7, r5

};


PixelShader PS_pass0 = asm
{

ps_3_0

// Generated by ATI's Ashli Compiler on 2006-04-04 14:19:08.
// Ashli Version: 1.7.1


// Instructions (Alu):            56
// Instructions (Tex):            2
// Registers    (Temp):           6
// Registers    (Constant):       9
// Registers    (TexCoord):       6
// Registers    (Texture):        2
// Registers    (OutputColor):    1

dcl_texcoord0 v2.rgba
dcl_texcoord1 v3.rgba
dcl_texcoord2 v4.rgba
dcl_texcoord3 v5.rgba
dcl_texcoord4 v6.rgba
dcl_texcoord6 v8.rgba

dcl_2d s0
dcl_2d s1

def c0, 0, 1, 0.3, 0.5
def c8, 0, 0, 0, 1

mov r0, c0.r
mov r0.rgb, c4
mov r0.a, c0.g
dp3 r1.r, v2.rgb, v2.rgb
rsq r1.r, r1.r
mul r1, r1.r, v2.rgb
dp3 r2.r, r1, r1
rsq r2.r, r2.r
mul r1, r2.r, r1
texld r2, v8, s1
add r2, r2, -c0.a
mov r3, c0.r
mul r3.r, r2.r, c0.b
mul r3.g, r2.g, c0.b
mov r3.b, r2.b
dp3 r2.r, r3, r3
rsq r2.r, r2.r
mul r2, r2.r, r3
dp3 r3.r, v6.rgb, v6.rgb
rsq r3.r, r3.r
mul r3, r3.r, v6.rgb
dp3 r4.r, v5.rgb, v5.rgb
rsq r4.r, r4.r
mul r4, r4.r, v5.rgb
mul r4, r4, r2.g
mad r3, r3, r2.r, r4
mad r1, r1, r2.b, r3
add r2, c5, -v3.rgb
dp3 r3.r, r2, r2
rsq r3.r, r3.r
dp3 r3.g, v4.rgb, v4.rgb
rsq r3.g, r3.g
mov r4, c0.r
mul r4.rgb, r3.g, v4.rgb
mad r4, r3.r, r2, r4
dp3 r3.g, r4, r4
rsq r3.g, r3.g
mul r4, r3.g, r4
dp3 r3.g, r1, r4
max r3.g, r3.g, c0.r
min r3.g, r3.g, c0.g
pow r3.g, r3.g, c3.r
mul r3.g, r3.g, c2.r
mul r4, c7, r3.g
texld r5, v8, s0
mul r2, r3.r, r2
dp3 r1.r, r1, r2
max r1.r, r1.r, c0.r
min r1.r, r1.r, c0.g
mul r1, r5, r1.r
mov r3, c6
mad r2, r3, r5, c8
mad r1, r0, r1, r2
mad r0, r0, r4, r1
mov r0.a, c1.r
mov oC0, r0

};


technique technique0
{

pass
{

VertexShaderConstant[0] = <mCamPos_0_0>;
VertexShaderConstant[1] = <mWorld_0_0[3]>;
VertexShaderConstant[2] = <mWorld_0_0[2]>;
VertexShaderConstant[3] = <mWorld_0_0[1]>;
VertexShaderConstant[4] = <mWorld_0_0[0]>;
VertexShaderConstant[5] = <mIWorld_0_0[3]>;
VertexShaderConstant[6] = <mIWorld_0_0[2]>;
VertexShaderConstant[7] = <mIWorld_0_0[1]>;
VertexShaderConstant[8] = <mIWorld_0_0[0]>;
VertexShaderConstant[9] = <mWorldViewProj_0_0[3]>;
VertexShaderConstant[10] = <mWorldViewProj_0_0[2]>;
VertexShaderConstant[11] = <mWorldViewProj_0_0[1]>;
VertexShaderConstant[12] = <mWorldViewProj_0_0[0]>;
PixelShaderConstant[1] = <Opacity_1_0>;
PixelShaderConstant[2] = <SpecularLevel_1_0>;
PixelShaderConstant[3] = <GlossLevel_1_0>;
PixelShaderConstant[4] = <LightCol0_1_0>;
PixelShaderConstant[5] = <LightPos0_1_0>;
PixelShaderConstant[6] = <Emissive_1_0>;
PixelShaderConstant[7] = <Specular_1_0>;
Sampler[1] = (BumpTexSampler);
Sampler[0] = (DiffuseTexSampler);
VertexShader  = <VS_pass0>;
PixelShader  = <PS_pass0>;

}

}


bool UseLPRT = false;